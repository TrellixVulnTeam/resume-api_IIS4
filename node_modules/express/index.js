/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

module.exports = require('./lib/express');
var express = require('express')
var app = express()
var validator = require('validator');
var urlencode = require('urlencode');


var bodyParser = require('body-parser')

//Setupbody parser
//app.use( bodyParser.json() );       // to support JSON-encoded bodies
app.use(bodyParser.urlencoded({     // to support URL-encoded bodies
  extended: true
})); 


//Get server listening
app.listen(3001, 'localhost', function() {

});



// SETUP Datastore
var datastore = require('@google-cloud/datastore')({
  projectId: 'resume-api-165600',
  keyFilename: 'key.json'
});
var key = datastore.key(['id', 'comment']);
 

 

// Return last 15 comments
app.get('/comments', function (req, res) {
  
    const query = datastore.createQuery('Comments')
    .order('timestamp', { descending: true })
    .limit(15);

    datastore.runQuery(query).then((results) => {
      const entities = results[0];
       res.status(200).send(JSON.stringify(entities))
      console.log(JSON.stringify(entities));
    });

   
});


// Create a new comment
app.post('/comments', function(req,res){
/*
  try{

  }
  catch (e) {

  }
  */
    console.log(req.body)
    var name = req.body.Name;
    var company = req.body.Company;
    var comment = req.body.Comment;
    console.log("name "+name+" comp "+company+" commen "+comment)
    var error =0;


      if (name == NaN || name == undefined || name == null)
        {
            console.log("name nan");
            error = 1;
        }
        else{
          if (!validator.isLength(name,  {min:3, max: 20}))
          {
            console.log("name error");
            error =1 ;
          }
        }

        if (comment == NaN || comment == undefined || comment == null)
        {
            console.log("comment nan");
            error = 1;
        }
        else{
             if (!validator.isLength(comment, {min:10, max: 150})) 
            {
               console.log("comment error")
              error =1;
            }
        }
        
       

        if (company == NaN || company == undefined || company == null)
        {

          console.log("company nan")
          company = "null";
        }
        else
        {
           if(!validator.isLength(company, {min:10, max: 150}))
          {
            console.log("company error")
            error=1;
          }
        }

   
   
   if (error == 1)
   {
    

         res.status(400).send(JSON.stringify({"Error":"Error in Input"}))
       }
    else
    {
             // Save data to Datastore. 
    var commentData = {
      name: name,
      company: company,
      comment: comment,
      timestamp: new Date().toISOString()
    };
     
     /*
    var commentKey = datastore.key('Comments');
    datastore.save({
      key: commentKey,
      data: commentData
    }, function(err) {

      datastore.save({
        key: commentKey,
        data: commentData
      }, 

      function(err) {
        if (!err) {
        }
      });
    });
    */

     var commentKey = datastore.key('Comments');
      datastore.save({
        key: commentKey,
        data: commentData
      }, function(err) {
                 res.status(200).send(JSON.stringify({"success":"comment added"}))
      });
    }
    

});



